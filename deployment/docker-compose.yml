# FastJob Docker Compose Configuration
# Production-ready setup with PostgreSQL, worker, and dashboard

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fastjob_postgres
    restart: always
    environment:
      POSTGRES_DB: fastjob_prod
      POSTGRES_USER: fastjob
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password}
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fastjob -d fastjob_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fastjob_network

  # FastJob Worker
  fastjob_worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: fastjob_worker
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      FASTJOB_DATABASE_URL: postgresql://fastjob:${POSTGRES_PASSWORD:-your_secure_password}@postgres:5432/fastjob_prod
      FASTJOB_LOG_LEVEL: INFO
      FASTJOB_JOBS_MODULE: myapp.jobs
    volumes:
      - ./logs:/app/logs
      - ./app:/app/myapp  # Mount your application code
    command: ["fastjob", "run-worker", "--concurrency=4", "--queues=default,urgent,background"]
    healthcheck:
      test: ["CMD", "fastjob", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fastjob_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # FastJob Dashboard (Pro/Enterprise)
  fastjob_dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: fastjob_dashboard
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      fastjob_worker:
        condition: service_healthy
    environment:
      FASTJOB_DATABASE_URL: postgresql://fastjob:${POSTGRES_PASSWORD:-your_secure_password}@postgres:5432/fastjob_prod
      FASTJOB_LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
    command: ["fastjob", "dashboard", "--host=0.0.0.0", "--port=8000"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fastjob_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Optional: Priority Worker for urgent jobs
  fastjob_priority_worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: fastjob_priority_worker
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      FASTJOB_DATABASE_URL: postgresql://fastjob:${POSTGRES_PASSWORD:-your_secure_password}@postgres:5432/fastjob_prod
      FASTJOB_LOG_LEVEL: INFO
      FASTJOB_JOBS_MODULE: myapp.jobs
    volumes:
      - ./logs:/app/logs
      - ./app:/app/myapp
    command: ["fastjob", "run-worker", "--concurrency=2", "--queues=urgent"]
    profiles:
      - priority  # Optional service - enable with --profile priority
    healthcheck:
      test: ["CMD", "fastjob", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fastjob_network

  # Optional: Redis for caching (Enterprise)
  redis:
    image: redis:7-alpine
    container_name: fastjob_redis
    restart: always
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    profiles:
      - cache  # Optional service - enable with --profile cache
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - fastjob_network

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: fastjob_nginx
    restart: always
    depends_on:
      - fastjob_dashboard
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    profiles:
      - proxy  # Optional service - enable with --profile proxy
    networks:
      - fastjob_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  fastjob_network:
    driver: bridge